// Generated by Haxe 4.1.1
package interp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class CommandTools extends haxe.lang.HxObject
{
	public CommandTools(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public CommandTools()
	{
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
		interp.CommandTools.__hx_ctor_interp_CommandTools(this);
	}
	
	
	protected static void __hx_ctor_interp_CommandTools(interp.CommandTools __hx_this)
	{
	}
	
	
	public static java.lang.String toString(interp.Command result)
	{
		//line 7 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
		switch (result.index)
		{
			case 0:
			{
				//line 10 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				int i = ((int) (haxe.lang.Runtime.toInt(result.params[0])) );
				//line 10 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				return haxe.root.Std.string(i);
			}
			
			
			case 1:
			{
				//line 9 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				boolean b = haxe.lang.Runtime.toBool(((java.lang.Boolean) (result.params[0]) ));
				//line 9 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				if (b) 
				{
					//line 9 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
					return "t";
				}
				else
				{
					//line 9 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
					return "f";
				}
				
			}
			
			
			case 2:
			{
				//line 11 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				haxe.root.Array<interp.Command> args = ((haxe.root.Array<interp.Command>) (result.params[1]) );
				//line 11 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				java.lang.String func = haxe.lang.Runtime.toString(result.params[0]);
				//line 12 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				java.lang.String result1 = interp._Function.Function_Impl_.toString(func);
				//line 13 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				{
					//line 13 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
					int _g = 0;
					//line 13 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
					while (( _g < args.length ))
					{
						//line 13 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
						interp.Command arg = args.__get(_g);
						//line 13 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
						 ++ _g;
						//line 15 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
						result1 = ( ( ( "ap " + result1 ) + " " ) + interp.CommandTools.toString(arg) );
					}
					
				}
				
				//line 17 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				return result1;
			}
			
			
		}
		
		//line 5 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
		return null;
	}
	
	
	public static int toInt(interp.Command result)
	{
		//line 24 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
		switch (result.index)
		{
			case 0:
			{
				//line 26 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				int i = ((int) (haxe.lang.Runtime.toInt(result.params[0])) );
				//line 26 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				return i;
			}
			
			
			default:
			{
				//line 27 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\CommandTools.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( interp.CommandTools.toString(result) + " should be int" ))) );
			}
			
		}
		
	}
	
	
}


