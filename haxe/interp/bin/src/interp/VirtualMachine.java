// Generated by Haxe 4.1.1
package interp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class VirtualMachine extends haxe.lang.HxObject
{
	public VirtualMachine(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public VirtualMachine(haxe.root.Array<interp.Token> top)
	{
		//line 8 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		interp.VirtualMachine.__hx_ctor_interp_VirtualMachine(this, top);
	}
	
	
	protected static void __hx_ctor_interp_VirtualMachine(interp.VirtualMachine __hx_this, haxe.root.Array<interp.Token> top)
	{
		//line 10 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		__hx_this.cursor = new haxe.root.Array<interp._VirtualMachine.Cursor>(new interp._VirtualMachine.Cursor[]{new interp._VirtualMachine.Cursor(((haxe.root.Array<interp.Token>) (top) ))});
		//line 11 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		__hx_this.stack = new haxe.root.Array<interp.Value>(new interp.Value[]{});
	}
	
	
	public haxe.root.Array<interp._VirtualMachine.Cursor> cursor;
	
	public haxe.root.Array<interp.Value> stack;
	
	public void start()
	{
		//line 16 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		while (( this.cursor.length > 0 ))
		{
			//line 18 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			interp._VirtualMachine.Cursor current = ((interp._VirtualMachine.Cursor) (this.cursor.pop()) );
			//line 19 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			label2:
			while (( current.index < current.tokens.length ))
			{
				//line 21 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				haxe.root.Array<interp.Value> tmp = this.stack;
				//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				interp.Token _g = current.tokens.__get(current.index);
				//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				interp.Value tmp1 = null;
				//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				switch (_g.index)
				{
					case 0:
					{
						//line 24 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						java.lang.String func = haxe.lang.Runtime.toString(_g.params[0]);
						//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						tmp1 = interp.Value.Func(func, null);
						//line 24 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
					case 1:
					{
						//line 28 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						interp.Value a = ((interp.Value) (this.stack.pop()) );
						//line 29 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (( a == null )) 
						{
							//line 29 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown("too short arguments")) );
						}
						
						//line 30 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						interp.Value b = ((interp.Value) (this.stack.pop()) );
						//line 31 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (( b == null )) 
						{
							//line 31 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown("too short arguments")) );
						}
						
						//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						tmp1 = interp.ValueTools.ap(a, b);
						//line 27 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
					case 2:
					{
						//line 47 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						java.math.BigInteger i = ((java.math.BigInteger) (_g.params[0]) );
						//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						tmp1 = interp.Value.Int(i);
						//line 47 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
					case 3:
					{
						//line 34 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						java.lang.String str = haxe.lang.Runtime.toString(_g.params[0]);
						//line 35 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (((haxe.ds.StringMap<haxe.root.Array<interp.Token>>) (((haxe.IMap<java.lang.String, haxe.root.Array<interp.Token>>) (interp.Main.variables) )) ).exists(str)) 
						{
							//line 37 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							current.index += 1;
							//line 38 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							this.cursor.push(current);
							//line 39 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							current = new interp._VirtualMachine.Cursor(((haxe.root.Array<interp.Token>) (((haxe.ds.StringMap<haxe.root.Array<interp.Token>>) (((haxe.IMap<java.lang.String, haxe.root.Array<interp.Token>>) (interp.Main.variables) )) ).get(str)) ));
							//line 40 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							break label2;
						}
						else
						{
							//line 22 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							tmp1 = interp.Value.Unknown(str, null);
						}
						
						//line 34 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
				}
				
				//line 21 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				tmp.push(tmp1);
				//line 51 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				current.index += 1;
			}
			;
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		{
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			if (( field != null )) 
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				switch (field.hashCode())
				{
					case 109757064:
					{
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (field.equals("stack")) 
						{
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							__temp_executeDef1 = false;
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							this.stack = ((haxe.root.Array<interp.Value>) (value) );
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							return value;
						}
						
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
					case -1349119146:
					{
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (field.equals("cursor")) 
						{
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							__temp_executeDef1 = false;
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							this.cursor = ((haxe.root.Array<interp._VirtualMachine.Cursor>) (value) );
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							return value;
						}
						
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		{
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			if (( field != null )) 
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				switch (field.hashCode())
				{
					case 109757538:
					{
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (field.equals("start")) 
						{
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							__temp_executeDef1 = false;
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "start")) );
						}
						
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
					case -1349119146:
					{
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (field.equals("cursor")) 
						{
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							__temp_executeDef1 = false;
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							return this.cursor;
						}
						
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
					case 109757064:
					{
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (field.equals("stack")) 
						{
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							__temp_executeDef1 = false;
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							return this.stack;
						}
						
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		{
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			if (( field != null )) 
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				switch (field.hashCode())
				{
					case 109757538:
					{
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						if (field.equals("start")) 
						{
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							__temp_executeDef1 = false;
							//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
							this.start();
						}
						
						//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		baseArr.push("stack");
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		baseArr.push("cursor");
		//line 3 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\VirtualMachine.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


