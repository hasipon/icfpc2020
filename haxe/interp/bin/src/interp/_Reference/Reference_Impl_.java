// Generated by Haxe 4.1.1
package interp._Reference;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Reference_Impl_
{
	static
	{
		//line 5 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		interp._Reference.Reference_Impl_.INVALID = interp._Reference.Reference_Impl_._new(-1);
	}
	
	public static int INVALID;
	
	public static int _new(int index)
	{
		//line 7 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		int this1 = index;
		//line 7 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		return ((int) (this1) );
	}
	
	
	public static int toInt(int this1)
	{
		//line 14 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		return this1;
	}
	
	
	public static int apFunc(int this1)
	{
		//line 19 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		return interp._Reference.Reference_Impl_._new(( this1 - 1 ));
	}
	
	
	public static int apArg(int this1)
	{
		//line 23 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		int f = interp._Reference.Reference_Impl_.toInt(interp._Reference.Reference_Impl_.apFunc(this1));
		//line 24 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		return interp._Reference.Reference_Impl_._new(( f - interp.TokenTools.getOffset(interp.Main.codes.__get(f)) ));
	}
	
	
	public static interp.Token get(int this1)
	{
		//line 29 "C:\\Users\\909mm\\Desktop\\Work\\git\\icfpc2020\\haxe\\interp\\src\\interp\\Reference.hx"
		return interp.Main.codes.__get(this1);
	}
	
	
}


